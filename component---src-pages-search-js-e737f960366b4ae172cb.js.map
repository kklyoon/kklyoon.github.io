{"version":3,"sources":["webpack:///./src/components/Search/ResultList.js","webpack:///./src/pages/search.js"],"names":["ResultList","props","handlePage","event","setState","currentPage","parseInt","target","innerText","state","componentDidUpdate","render","listIndex","data","this","allMarkdownRemark","edges","page","list","pageTotalNum","length","pageNum","i","Math","floor","push","key","className","onClick","slice","pageList","createPage","map","v","node","frontmatter","fields","rawMarkdownBody","title","slug","keyword","toLowerCase","type","indexOf","to","filter","el","id","Component","SearchPage","handleKeyword","value","handleType","location","icon","faSearch","onChange","autoFocus","name","checked","htmlFor","React"],"mappings":"uLAsGeA,G,sBA/Fb,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAQFC,WAAa,SAAAC,GACX,EAAKC,SAAS,CAAEC,YAAaC,SAASH,EAAMI,OAAOC,cARnD,EAAKC,MAAQ,CACXJ,YAAa,GAHE,E,4CAOnBK,mBAAA,a,EAMAC,OAAA,WAAU,IAIFC,EAJC,OACDC,EAAOC,KAAKb,MAAMY,KAAKE,kBAAkBC,MAyDzCC,EAhCa,SAACC,EAAMb,GAOxB,IANA,IACMc,EACJD,EAAKE,OAFe,IAEY,EAC5BF,EAAKE,OAHW,GAIhBF,EAAKE,OAJW,GAIc,EAChCC,EAAU,GACLC,EAAI,EAAGA,EAAIC,KAAKC,MAAML,GAAeG,IAC5CD,EAAQI,KACN,4BACEC,IAAK,OAASJ,EACdK,UAAU,cACVC,QAAS,EAAK1B,YAEboB,EAAI,IAeX,OATED,EADEhB,EAAc,EACNgB,EAAQQ,MAAMxB,EAAc,EAAGA,EAAc,GAE7CgB,EAAQQ,MAAM,EAAG,GAOtB,CAAEX,KAJTA,EAAOA,EAAKW,MAxBU,GAyBJxB,EAzBI,MA0BJA,GAEHyB,SAAUT,GAGdU,EAtDPnB,EAAY,EACLC,EAAKmB,KAAI,SAAAC,GAAM,IAAD,EAC0BA,EAAEC,KAA3CC,EADe,EACfA,YAAaC,EADE,EACFA,OAAQC,EADN,EACMA,gBACrBC,EAAUH,EAAVG,MACAC,EAASH,EAATG,KACFC,EAAU,EAAKvC,MAAMuC,QAAQC,cACnC,MACuB,QAApB,EAAKxC,MAAMyC,OAC0C,IAApDL,EAAgBI,cAAcE,QAAQH,KACE,IAA1CF,EAAMG,cAAcE,QAAQH,GAG1B,wBAAId,IAAKa,EAAMZ,UAAS,UAAYf,KAClC,kBAAC,IAAD,CAAMgC,GAAIL,GAAOD,IAIhB,QAEGO,QAAO,SAAAC,GAAE,OAAW,OAAPA,MAmCWhC,KAAKL,MAAMJ,aAEjD,OACE,yBAAK0C,GAAG,cACL9B,EAAKC,KAAKE,OACT,wBAAIO,UAAU,UAAUV,EAAKC,MAE7B,uBAAGS,UAAU,aAAb,YAGDV,EAAKa,SAASV,OAAS,EACtB,yBAAKO,UAAU,aAAaV,EAAKa,UAC/B,O,GApFakB,cCInBC,G,sBACJ,WAAYhD,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAOFiD,cAAgB,SAAA/C,GACd,EAAKC,SAAS,CAAEoC,QAASrC,EAAMI,OAAO4C,SATrB,EAWnBC,WAAa,SAAAjD,GACX,EAAKC,SAAS,CAAEsC,KAAMvC,EAAMI,OAAOwC,MAVnC,EAAKtC,MAAQ,CACX+B,QAAS,GACTE,KAAM,OAJS,E,oCAenB/B,OAAA,WACE,IAAM0C,EAAWvC,KAAKb,MAAMoD,SAC5B,OACE,kBAAC,IAAD,CAAQA,SAAUA,GAChB,yBAAKN,GAAG,UACN,yBAAKpB,UAAU,mBACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAIA,UAAU,cAAc2B,KAAMC,MAClC,2BACER,GAAG,cACHL,KAAK,SACLc,SAAU1C,KAAKoC,cACfO,WAAS,KAIb,yBAAK9B,UAAU,eACb,6BACE,2BACEe,KAAK,QACLgB,KAAK,aACLX,GAAG,MACHS,SAAU1C,KAAKsC,WACfO,QAA6B,QAApB7C,KAAKL,MAAMiC,OAEtB,2BAAOkB,QAAQ,OAAf,UAEF,6BACE,2BACElB,KAAK,QACLgB,KAAK,aACLX,GAAG,QACHS,SAAU1C,KAAKsC,WACfO,QAA6B,UAApB7C,KAAKL,MAAMiC,OAEtB,2BAAOkB,QAAQ,SAAf,SAKN,kBAAC,EAAD,CACE/C,KAAMC,KAAKb,MAAMY,KACjB2B,QAAS1B,KAAKL,MAAM+B,QACpBE,KAAM5B,KAAKL,MAAMiC,U,GA3DJmB,IAAMb,YAuEhBC,a","file":"component---src-pages-search-js-e737f960366b4ae172cb.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport './ResultList.scss';\n\nclass ResultList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPage: 1,\n    };\n  }\n\n  componentDidUpdate() {}\n\n  handlePage = event => {\n    this.setState({ currentPage: parseInt(event.target.innerText) });\n  };\n\n  render() {\n    const data = this.props.data.allMarkdownRemark.edges;\n\n    const createList = () => {\n      let listIndex = 1;\n      let list = data.map(v => {\n        const { frontmatter, fields, rawMarkdownBody } = v.node;\n        const { title } = frontmatter;\n        const { slug } = fields;\n        const keyword = this.props.keyword.toLowerCase();\n        if (\n          (this.props.type === 'all' &&\n            rawMarkdownBody.toLowerCase().indexOf(keyword) !== -1) ||\n          title.toLowerCase().indexOf(keyword) !== -1\n        ) {\n          return (\n            <li key={slug} className={`result-${listIndex++}`}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          );\n        }\n        return null;\n      });\n      return list.filter(el => el !== null);\n    };\n\n    const createPage = (list, currentPage) => {\n      const pageDivideNum = 15;\n      const pageTotalNum =\n        list.length % pageDivideNum === 0\n          ? list.length / pageDivideNum\n          : list.length / pageDivideNum + 1;\n      let pageNum = [];\n      for (let i = 0; i < Math.floor(pageTotalNum); i++) {\n        pageNum.push(\n          <button\n            key={'page' + i}\n            className=\"page-number\"\n            onClick={this.handlePage}\n          >\n            {i + 1}\n          </button>\n        );\n      }\n\n      if (currentPage > 3) {\n        pageNum = pageNum.slice(currentPage - 3, currentPage + 2);\n      } else {\n        pageNum = pageNum.slice(0, 5);\n      }\n\n      list = list.slice(\n        pageDivideNum * currentPage - pageDivideNum,\n        pageDivideNum * currentPage\n      );\n      return { list, pageList: pageNum };\n    };\n\n    const page = createPage(createList(), this.state.currentPage);\n\n    return (\n      <div id=\"ResultList\">\n        {page.list.length ? (\n          <ul className=\"result\">{page.list}</ul>\n        ) : (\n          <p className=\"no-result\">검색 결과 없음</p>\n        )}\n\n        {page.pageList.length > 1 ? (\n          <div className=\"page-list\">{page.pageList}</div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nResultList.propTypes = {\n  keyword: PropTypes.string.isRequired,\n  data: PropTypes.object.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default ResultList;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/layout';\nimport ResultList from '../components/Search/ResultList';\nimport './search.scss';\n\nclass SearchPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: '',\n      type: 'all',\n    };\n  }\n\n  handleKeyword = event => {\n    this.setState({ keyword: event.target.value });\n  };\n  handleType = event => {\n    this.setState({ type: event.target.id });\n  };\n\n  render() {\n    const location = this.props.location;\n    return (\n      <Layout location={location}>\n        <div id=\"search\">\n          <div className=\"search-bar-wrap\">\n            <div className=\"search-bar\">\n              <Fa className=\"search-icon\" icon={faSearch} />\n              <input\n                id=\"searchInput\"\n                type=\"search\"\n                onChange={this.handleKeyword}\n                autoFocus\n              />\n            </div>\n\n            <div className=\"search-type\">\n              <div>\n                <input\n                  type=\"radio\"\n                  name=\"searchType\"\n                  id=\"all\"\n                  onChange={this.handleType}\n                  checked={this.state.type === 'all'}\n                />\n                <label htmlFor=\"all\">제목+내용</label>\n              </div>\n              <div>\n                <input\n                  type=\"radio\"\n                  name=\"searchType\"\n                  id=\"title\"\n                  onChange={this.handleType}\n                  checked={this.state.type === 'title'}\n                />\n                <label htmlFor=\"title\">제목</label>\n              </div>\n            </div>\n          </div>\n\n          <ResultList\n            data={this.props.data}\n            keyword={this.state.keyword}\n            type={this.state.type}\n          />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nSearchPage.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default SearchPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { ne: false } } }\n    ) {\n      edges {\n        node {\n          rawMarkdownBody\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            published\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}