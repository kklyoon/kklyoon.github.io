{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/2020_04_06_Array Manipulation/","result":{"data":{"site":{"siteMetadata":{"title":"My training box","author":"kklyoon"}},"markdownRemark":{"id":"2d19e072-18af-5a0a-848a-a2fb624e7746","html":"<p>원문 : <a href=\"https://www.hackerrank.com/challenges/crush/problem\">https://www.hackerrank.com/challenges/crush/problem</a></p>\n<p>배열의 길이, 배열의 구간별 가중치값들이 더해졌을 때 가장 높은 값을 가지고 있는 구간의 값을 출력하는 문제</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">a b k\n1 5 3\n4 8 7\n6 9 1</code></pre>\n      </div>\n<p>a, b 는 구간을 나타내고 k 는 가중치 값을 나타낸다.\n-> 1 5 3 은 1에서 5까지의 구간에 3을 더하라 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">index-&gt;\t 1 2 3  4  5 6 7 8 9 10\n\t      [0,0,0, 0, 0,0,0,0,0, 0]\n\t      [3,3,3, 3, 3,0,0,0,0, 0]\n\t      [3,3,3,10,10,7,7,7,0, 0]\n\t      [3,3,3,10,10,8,8,8,1, 0]</code></pre>\n      </div>\n<p>각 라인에 따라 구간 값을 더하면 위와 같이 된다.</p>\n<p>따라서 처음으로 드는 생각은 위와 같은 과정으로 로직을 짜게 된다.</p>\n<p>각 라인을 반복문으로 돌면서 해당 구간을 따라가며 값을 더해주면 당연히 O(n<sup>2</sup>)시간이 걸리게 된다.</p>\n<p>시간을 줄일려면 다른 방법을 사용하면 되는데 일단 n+1 사이즈 배열을 선언하고</p>\n<p>구간별 값을 시작지점에 더하고 끝지점+1 에 구간별 값을 빼준다.</p>\n<p>반복문이 끝나고 배열의 값을 n 까지 모두 더하다 보면 가장 큰 구간의 값을 찾을수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"c++\">\n      <pre class=\"language-c++\"><code class=\"language-c++\">long arrayManipulation(int n, vector&lt;vector&lt;int&gt;&gt; queries) {\n    vector&lt;long&gt; output(n+1,0);\n    long max = 0;\n    long x = 0;\n    for(int i = 0 ; i &lt; queries.size(); i++){\n        vector&lt;int&gt; per = queries[i];\n        int a = per[0]; int b = per[1]; int k = per[2];\n        output[a-1] += k;\n        if(b + 1 &lt;= n) output[b] -= k;\n        \n    }\n    for(int i = 0 ; i &lt; n ; i++){\n        x += output[i];\n        if(max &lt; x) max = x;\n    }\n    return max;\n}</code></pre>\n      </div>\n<p>코틀린 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\">\n      <pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">arrayManipulation</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> queries<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Array<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Long <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">LongArray</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> result<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> temp<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    queries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">{</span>v <span class=\"token operator\">-></span>\n        arr<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        arr<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">{</span> \n        temp <span class=\"token operator\">+=</span> it\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;</span> temp<span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> temp\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>구간별 값은 구간에만 해당되고 구간이 끝나면 다시 빼는 생각을 해야 나올 수 있는 발상</p>","excerpt":"원문 : https://www.hackerrank.com/challenges/crush/problem 배열의 길이, 배열의 구간별 가중치값들이 더해졌을 때 가장 높은 값을 가지고 있는 구간의 값을 출력하는 문제 a, b 는 구간을 나타내고 k…","frontmatter":{"title":"[Algorithm][hackerrank] Array Manipulation","date":"2020-04-06","tags":["알고리즘","algorithm","hackerrank"],"keywords":["My training box"]}}},"pageContext":{"slug":"/2020_04_06_Array Manipulation/","previous":{"fields":{"slug":"/2020_04_06_between-two-sets/"},"frontmatter":{"title":"[Algorithm][hackerrank] Between Two Sets","tags":["알고리즘","algorithm","hackerrank"],"published":true}},"next":{"fields":{"slug":"/2020_04_09_Minimum Average Waiting Time/"},"frontmatter":{"title":"[Algorithm][프로그래머스] 디스크 컨트롤러","tags":["알고리즘","algorithm","hackerrank","Programmers","프로그래머스"],"published":true}}}},"staticQueryHashes":["3649515864"]}