원문 : http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html

Get that job at Google

Oh, and um, why Google?

Oho! Why Google, you ask? Well let's just have that dialog right up front, shall we?

.... (omission)


False negative 비율이 높다. 그러니 오퍼 못받아도 상처받지 마라. 운이 안좋을 수 있다. ( 그 시기의 구글 내부사정이나 상황이 안좋아서)

면접자에게 무엇이 중요한지 말할 수 없다. 어느 회사라도 말이다. 당신에게 특별히 조언을 구하는게 아니라면. 대학에서 면접관이 되는 방법을 가르쳐주지 않기 때문에 '좋은 면접관'의 스킬, 질문, 스타일, 피드백 등을 바꿀 수 없다. 

모든 경력 면접관들은 애용하는 과목을 가지고 있으며 그들이 면접자를 정확하게 평가한다고 믿는 특정한 질문들을 가지고 있다. 면접관에 따라 문제는 다를 수 있으며 겹치지 않을 수 있다.

전통적인 예는 다음과 같다. 면접관 A 는 C++, 파일시스템, 네트워크 프로토콜, 이산 수학등을 묻는다. 면접관 B는 Java, 디자인 패턴, 유닛테스트, 웹 프레임워크, 소프트웨어 프로젝트 관리에 대해 묻는다. 같은 면접자에 대해 두 면접관은 다른 평가를 할 수 있다. 하지만 둘 다 우연히 데이터 구조, 유닉스 유틸리티, 프로세스 대 쓰레드에 대해 물어본 면접관 C 에 의해 통과될 수도 있다. 이는 기술 회사에서 언제나 일어나는 일이다. 

그래서 당신이 만약 소프트웨어 회사에서 면접을 보러 간다면 이러한 상황에 대한 계획을 세우고 그런 한명 이상의 사람에 대한 대비를 해야한다는 것이다. 

그리고 6~12 달이 걸려 다시 지원하게 되면 false-negative 문제를 해결하고 다시 시작하는 좋은 기회가 될 수 있다. 많은 사람들이 두번 세번 시도했다가 실패한다.

당신도 그럴 수 있다.

여기까지 읽었다면 깨달았을 것이다. 내가 면접관 D 라는 것을. 개인적으로 애용하는 질문과 주제들이 하나의 사람일 뿐이고 그것은 다른 이들과 낫지도 나쁘지도 않다는 것을. 

대신에 구글같은 회사에 지원하는데 필요한 주요한 주제들을 준비하는것을 권한다. 러프하게 말해서 회사들은 그들의 소프트웨어와 분산시스템을 만든다. 다른 기술 회사들의 족적 그리고 반대로 그러한 프로덕트를 사용하는 회사들에 관한 것들. 구글과 닮은 회사들에 관한 것 

웜업

기술적인것 외에

준비는 하고 가자. 웜업은 짧은것 긴것 두가지가 있는데 둘다 해야한다. 

롱텀 웜업 : 공부 연습, 일주일에 하나 혹은 두가지. 화이트 보드에 문제를 푸는 마인드를 가져야 한다. 화이트 보드에 문제는 푸는 연습

숏텀 웜업 : 전날 충분히 휴식을 취하고 인터뷰 당일날 웜업을 하라

롱텀 웜업의 바른 예

1) 자료구조와 알고리즘 책. 왜? 문제 식별을 강화하는데 도움이 된다. 많은 면접관은 설명 없이 그들이 묻고 있는 광범위한 질문들을 이해할 때 만족한다. 예를 들어, 미국지도에 색을 칠하는 문제를 묻는다면 그래프 채색 문제로 인식하는 것에 대해 만족해한다. 

그리고 원리도 알고 있다면 빨리 해답을 찾을 수 있을 것이다. 특정 문제의 주제가 특정 알고리즘과 데이터 구조로 연결된다는 것을 인식하는 기술을 연습하라

내가 가장 좋아하는 책은 Steven Skiena's The Algorithm Design Manual 이다. 중요한 부분은 책의 후반부로, 수많은 유용한 문제들과 그것들을 해결하기 위한 다양한 방법들에 대한 일종의 백과사전이다. 거의 모든 페이지에 간단한 그림이 있어 기억하기 쉽다. 이는 수백가지의 문제 유형을 식별하는 방법을 배울 수 있는 좋은 방법이다. 

2) 친구와 가상 인터뷰 해보기, 친구가 랜덤으로 질문하고 화이트 보드에 쓰면서 답하기 

필자는 처음 구글 인터뷰를 볼 때 두가지를 준비하지 않았다. 화이트 보드에 코딩을 할 때 7년간 다른 인터뷰를 할때보다 충격을 받았다. 어렵다. 그래서 알고리즘을 잊어버리고 자료구조도 잊어버리고 했다. 

두번째 면접을 볼때는 이러한 준비를 일주일간 한결과 더 좋아졌다.

짧은 시간 준비한다면 당신이 할 수 있는 모든 집중을 다해서 웜업을 하는 것 뿐이다. 문제를 풀고 책을 읽어라. 면접전에 적어도 한시간은 연습하도록 해라. 

Mental Prep
멘탈 준비

겸손하고, 마음을 열고, 집중하라

만약 당신이 오만하다고 생각되면, 사람들은 당신과 함께 일하고 싶은지 의문이 들 것이다. 거만해 보이는 가장 좋은 방법은 면접관의 질문의 타당성에 의문을 제기하는 것이다. 
문제를 풀다가 막히면 도움이나 힌트를 요청하라. 화제를 바꾸려고 하지말고 질문에 대답하라. 면접관에게 허세를 부리지 마라. 
어떤 면접관은 당신에게 코드를 쓰라고 요구하지 않을 것이지만, 그들은 당신이 대답하는 동안 어느 시점에 화이트보드에 코드를 쓰기 시작하기를 기대할 것이다.
면접관들은 코드에 대한 기대가 다양하다. 면접관에 따라 문법에 엄격할수도 그렇지 않을 수도 있다. 그러니 문법에 관심이 있는지 물어보라 그리고 코드를 다른 각도 다른 거리에서 주의깊게 보고 버그가 있을지 찾아보라. 1미터 쯤 떨어지면 놀랍게도 무엇을 놓칠 수 있는지 찾을 수 있을 것이다.

문제를 명확히 하는 질문을 해도 좋다 그리고 가끔씩 면접관에게 문제를 제대로 접근하고 있는지 확인받는 것도 좋다. 어떤 면접관은 그냥 건너뛰고 코딩을 시작하는 것을 체크하기도 한다. 코드가 맞다고 해도. 그들은 당신이 제대로 생각하지않고 계획도 없이 달려드는 사람이라고 생각할지도 모른다. 그러므로 문제의 정답을 알고 있더라도 문제를 접근하는 과정을 확인하는 질문을 면접관에게 던져라
하지만 본격적으로 문제를 풀기전 너무 많은 시간을 소모하지마라 면접관이 패널티를 줄 수 있다. 면접관들은 한가지 이상의 질문을 물어보기 때문에 첫번째 질문에 시간을 많이 쓰면 다른 문제를 풀 시간이 없을 것이다. 그렇게 되면 면접관의 당신의 스킬 전부를 볼 수 없기 때문에 불리하다. 

기술적인 것 외의 tip : 얇은 굵기의 보드마커를 직접 들고 가라 화이트보드를 더 넓게 쓸 수 있다. 그리고 화이트보드 공간을 쓰는 방법을 연습하라 ( 오른쪽 공간에서 시작하는 짓은 하지 말도록). 마커가 마르지 않도록 생각하는동안 뚜껑닫기


기술준비 팁


알고리즘 복잡도 : Big-O notation 개념 필수

Sorting: 버블 sort 말고. n*log(n) 에 해당되는 sorting 알고리즘은 필수. 퀵소트나 머지소트는 필수적으로 알고 있어야 한다.
그리고 제발 인터뷰 도중에 linked list 는 sorting 하려고 하지마라.

Hashtables: 해시테이블은 가장 중요한 데이터 구조이다. 어떻게 동작하는지 반드시 알고 있어야 한다. 배열을 이용해서 구현할 수 있어야 한다. 

Trees: 알고 있어야 한다. 기본이다. 만드는법, 순회하는법, 변경하는 법 등을 알고 있어야 한다. 최소한 이진트리, n-ary trees ( 자식이 n 이하인 트리), trie-trees ( 문자열 검색용 트리) 등에 대해서 알고 있어야 한다. 트리는 연습용으로 좋은 소스이다.

balanced binary tree ( 오른쪽, 왼쪽 노드의 깊이차가 1이하 )의 특징을 적어도 하나 이상알고 있어야 한다. ( red/black tree, splay tree, AVL tree 등이 어떻게 구현되는지 )
red/black tree : 삽입, 삭제, 검색 속도 O(logn), 숫자 같은 비교가능한 데이터에 쓰임, 리프노드에 데이터 없음, 부모는 오른쪽 자식 이하 왼쪽 자식 이상 값을 가지고 있다. 루트노드로부터 가장 먼 경로까지의 거리가, 가장 가까운 경로까지의 거리의 두배보다 항상 작다. ( 모든 리프노트에 접근하는 경로의 블랙노드 숫자가 같다)
splay tree : Splay Tree는 BST의 한 종류로써 삽입, 삭제, 검색 등의 쿼리를 amortized O(log n)이라는 시간에 처리가 가능하다. splay 함수(입력노드를 root 로 만들어주는 함수)와 rotate(입력노드를 부모로 올려주는 함수) 함수를 사용해서 균형을 맞춘다. 
AVL tree : O(logn) 시간복잡도로 삽입, 삭제, 검색을 할 수 있다. 그러나 삽입 삭제를 할 때 2개의 경로가 필요해서 red/black tree 만큼 효율이 좋지는 않다. Balance Factor(왼쪽 서브트리 depth 에서 오른쪽 서브트리 depth 를 뺀값)가 2, -2 이상이면 로테이션 시켜서 균형을 맞춤
tree 순회 알고리즘 역시 알고 있어야 한다. BFS, DFS 그리고 inorder, postorder, preorder 의 차이점



Graphs
그래프

그래프 역시 생각보다 중요하다. 그래프를 메모리에 표현하는 전형적인 세가지 방법이 있다. (객체, 포인트, 행렬, 인접 리스트) 그리고 각각의 표현방법을 숙지하고 장단점을 알고 있어야 한다. 기본적인 그래프 순회 알고리즘도 알고 있어야 한다. breadth-first, depth-first 그리고 각 알고리즘의 복잡도 장단점, 코드로 구현하는 방법
그래서 좀더 심화알고리즘 다익스트라 혹은 A*, 기회가 있으면. 이것들은 게임 프로그래밍에서부터 분산 컴퓨팅까지 쓰이기 때문에 알고 있어야 한다.


언제든 누가 문제를 주면 그래프를 생각하라. 어떤 종류의 관계든지 가장 근본적이고 유연한 표현 방법이기 때문에 디자인 문제일 경우 그래프가 관련된 문제일 가능성이 절반이다. 다른 해결방법을 찾아보기전에 그래프를 사용하여 문제를 해결할 방법을 생각해보라(중요)


그 밖의 데이터 구조

다양한 종류의 자료구조와 알고리즘을 알고 있어야 한다. NP-comlete 문제, TSP, knapsack 문제 등은 면접관이 비슷한 문제를 물어보면 알아볼 수 있어야 한다.
NP-complete 가 무슨뜻인지 명확하게 알고 있어야 한다. 기본적으로 데이터구조를 열심히 공부했고 열심히 복습했다면 틀릴 수 없다.

Math
수학

어떤 면접관은 이산수학 기초문제를 물어본다. 다른 곳보다 구글에서 더 중요하게 취급함. counting problems, probability problems,  and other Discrete Math 101 situations 등 근본 원리에 관한 문제들

수학문제를 물어본다고 화내지마라. 최선을 다하라. 면접전에 조합과 확률에 관한 문제를 복습한다면 좋은 결과가 있을 것이다. n-choose-k problems 문제 같은 것들
시간이 부족해도 면접에 필요한 이산 수학 개념을 정리하자

이산 수학에 대해서는 좋은 추천을 못해주겠다. 누가 코멘트 좀 
 "Concrete Mathematics: A Foundation for Computer Science" by Graham, Knuth, and Patashnik

운영 체제

프로세스와 쓰레드 개념 concurrency issue 에 관한 것들 많은 면접관이 물어본다. 정말 기본적인 것이기 때문에 알고 있어야 함. lock, mutex, semaphore, monitor 등이 어떻게 동작하는지. 데드락 과 livelock, race condition 과 그것을 피하는 방법. 프로세스는 어떤 리소스를 가지는지 쓰레드는 어떤 리소스를 가지는지 context switching 이 어떻게 동작하는지 운영체제와 하드웨어가 어떻게 추기화 되는지. 스케쥴링에 관한 것.

추천책  Doug Lea's Concurrent Programming in Java. 학교에서 배우는것들 말고 실용적으로 쓰이는 것들 


코딩

한가지 이상 언어를 정말 잘해야한다. C++ 나 Java 같은 . . C# 도 좋다. 면접에서 쓸 기회가 있다. 가장 잘하는 언어에 대한 자세한 질문을 받을 것이다.


다른 것들

여기서 언급한 것들은 대부분 중요한? 기본적인? 것들이다. 정말 모르면 안되는 것들. 이산수학은 잠재적으로 optional 한 것이지만 하나도 모른다면 문제가 됨. 내가 말한 모든 것들은 알아야 하는 것들이고 면접 수준에 대비해야 할 것들이다. 면접관에 따라 더 어려울 수도 있다.







